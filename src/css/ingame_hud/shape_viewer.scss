@use "sass:math";

#ingame_HUD_ShapeViewer {
    $dims: 17rem;

    .content {
        display: flex;
        width: $dims;
        width: 100%;
        flex-direction: column;
        overflow-x: hidden;

        &[data-layers="3"],
        &[data-layers="4"] {
            width: 2 * $dims;
            .renderArea {
                display: grid;
                grid-template-columns: 1fr 1fr;
                grid-row-gap: 1.5rem;
            }
        }

        .renderArea {
            display: grid;
            width: 100%;
            grid-row-gap: 1rem;
            place-items: center;
        }

        .infoArea {
            align-self: flex-end;
            margin-top: 1rem;
            display: flex;
            flex-direction: column;
            overflow: hidden;

            button {
                margin: 0;
                @include PlainText;
            }
        }

        .layer {
            position: relative;
            background: #eee;

            @include DarkThemeOverride {
                background: rgba(0, 10, 20, 0.2);
            }
            width: 15rem;
            height: 10rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: $globalBorderRadius;

            > canvas {
                width: 5rem;
                height: 5rem;
            }

            .quad {
                position: absolute;
                width: 50%;
                height: 50%;
                display: flex;
                justify-content: center;
                align-items: center;
                box-sizing: border-box;

                $arrowDims: 2.3rem;
                $spacing: 0.9rem;
                padding: 0.6rem;

                .colorLabel {
                    text-transform: uppercase;
                    @include SuperSmallText;
                    font-size: 0.9rem;
                }

                .emptyLabel {
                    text-transform: uppercase;
                    @include SuperSmallText;
                    font-size: 0.9rem;
                }

                &::after {
                    content: " ";
                    background: rgba(0, 10, 20, 0.5);
                    width: $arrowDims;
                    height: 0.1rem;
                    position: absolute;
                    transform: rotate(45deg);
                    transform-origin: 50% 50%;
                }
                @include DarkThemeOverride {
                    &::after {
                        background: rgba(255, 255, 255, 0.5);
                    }
                }

                &.quad-0 {
                    right: 0;
                    top: 0;
                    align-items: flex-start;
                    justify-content: flex-end;

                    &::after {
                        left: $spacing;
                        bottom: math.div($arrowDims, 2) + $spacing;
                        transform: rotate(-45deg);
                    }
                }
                &.quad-1 {
                    bottom: 0;
                    right: 0;

                    align-items: flex-end;
                    justify-content: flex-end;

                    &::after {
                        left: $spacing;
                        top: math.div($arrowDims, 2) + $spacing;
                        transform: rotate(45deg);
                    }
                }
                &.quad-2 {
                    bottom: 0;
                    left: 0;

                    align-items: flex-end;
                    justify-content: flex-start;

                    &::after {
                        right: $spacing;
                        top: math.div($arrowDims, 2) + $spacing;
                        transform: rotate(135deg);
                    }
                }
                &.quad-3 {
                    top: 0;
                    left: 0;

                    align-items: flex-start;
                    justify-content: flex-start;

                    &::after {
                        right: $spacing;
                        bottom: math.div($arrowDims, 2) + $spacing;
                        transform: rotate(225deg);
                    }
                }
            }
        }
    }
}
